{"ast":null,"code":"var _jsxFileName = \"/Users/owner/Documents/SPRINGBOARD/Projects/space-travel/src/pages/Planets.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SpaceTravelApi from '../services/SpaceTravelApi';\nimport Planet from '../components/ Planet';\nimport DestinationContext from '../context/DestinationContext';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planets = () => {\n  _s();\n  const navigate = useNavigate();\n  const [planets, setPlanets] = useState('');\n  // const {targetPlanet} = useContext(DestinationContext);\n  // const [, updateState] = React.useState();\n  // const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [resetCount, setResetCount] = useState(0);\n  const [resetPlanetObjs, setResetPlanetObjs] = useState([]);\n  useEffect(() => {\n    const loadPlanets = async () => {\n      const loadingAPI = await SpaceTravelApi.getPlanets();\n      console.log(loadingAPI, 'loadingAPI');\n      setPlanets(loadingAPI.data);\n    };\n    loadPlanets();\n  }, []);\n  const loadPlanetsFromEffect = () => {\n    if (planets !== '') {\n      return planets.map(p => {\n        return /*#__PURE__*/_jsxDEV(Planet, {\n          id: p.id,\n          pictureUrl: p.pictureUrl,\n          name: p.name,\n          currentPopulation: p.currentPopulation\n        }, p.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 19\n        }, this);\n      });\n    }\n  };\n\n  // useEffect(() => {\n  //   if(targetPlanet !== null){\n  //     forceUpdate();\n  //   }\n  // }, [forceUpdate, targetPlanet])\n\n  const incrementResetCount = () => {\n    setResetCount(count => count + 1);\n  };\n  useEffect(() => {\n    if (resetCount > 0) {\n      const resetPlanetsCapacities = async () => {\n        const getPlanets = await SpaceTravelApi.getPlanets();\n        const planetData = getPlanets.data;\n        for (let data of planetData) {\n          if (data.id !== 2) {\n            data.currentPopulation = 0;\n          } else {\n            data.currentPopulation = 100000;\n          }\n        }\n        const planetObj = JSON.stringify({\n          \"planets\": planetData\n        });\n        const local = localStorage.getItem(\"MOCK_DB\");\n        localStorage.setItem(\"planets\", JSON.stringify({\n          \"planets\": planetData\n        }));\n        console.log(planetData, 'getPlanets');\n      };\n      resetPlanetsCapacities();\n    }\n  }, [resetCount]);\n  console.log(\"rendering...\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => incrementResetCount(),\n      children: \"Reset Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this), loadPlanetsFromEffect()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Planets, \"lRwRsZkvQ7og8ApzTg5c3xK+ngo=\", false, function () {\n  return [useNavigate];\n});\n_c = Planets;\nexport default Planets;\nvar _c;\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","SpaceTravelApi","Planet","DestinationContext","useContext","jsxDEV","_jsxDEV","Planets","_s","navigate","planets","setPlanets","resetCount","setResetCount","resetPlanetObjs","setResetPlanetObjs","loadPlanets","loadingAPI","getPlanets","console","log","data","loadPlanetsFromEffect","map","p","id","pictureUrl","name","currentPopulation","fileName","_jsxFileName","lineNumber","columnNumber","incrementResetCount","count","resetPlanetsCapacities","planetData","planetObj","JSON","stringify","local","localStorage","getItem","setItem","children","onClick","_c","$RefreshReg$"],"sources":["/Users/owner/Documents/SPRINGBOARD/Projects/space-travel/src/pages/Planets.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SpaceTravelApi from '../services/SpaceTravelApi';\nimport Planet from '../components/ Planet';\nimport DestinationContext from '../context/DestinationContext';\nimport { useContext } from 'react';\n\nconst Planets = () => {\n    const navigate = useNavigate();\n    const [planets, setPlanets] = useState('');\n    // const {targetPlanet} = useContext(DestinationContext);\n    // const [, updateState] = React.useState();\n    // const forceUpdate = React.useCallback(() => updateState({}), []);\n    const [resetCount, setResetCount] = useState(0);\n    const [resetPlanetObjs, setResetPlanetObjs] = useState([]);\n\n    useEffect(() => {\n        const loadPlanets = async () => {\n            const loadingAPI = await SpaceTravelApi.getPlanets();\n            console.log(loadingAPI, 'loadingAPI')\n            setPlanets(loadingAPI.data);\n        }\n\n        loadPlanets(); \n    }, [])\n\n    const loadPlanetsFromEffect = () => {\n        if(planets !== ''){\n            return (\n              planets.map((p) => {\n                return (\n                  <Planet \n                    id={p.id} \n                    key={p.id}\n                    pictureUrl={p.pictureUrl} \n                    name={p.name} \n                    currentPopulation={p.currentPopulation}\n                  />\n                )\n              })\n            )\n          }\n    }\n\n    // useEffect(() => {\n    //   if(targetPlanet !== null){\n    //     forceUpdate();\n    //   }\n    // }, [forceUpdate, targetPlanet])\n\n    const incrementResetCount = () => {\n      setResetCount(count => count + 1);\n    }\n\n    useEffect(() => {\n      if(resetCount > 0){\n      const resetPlanetsCapacities = async () => {\n        const getPlanets = await SpaceTravelApi.getPlanets();\n        const planetData = getPlanets.data;\n        for(let data of planetData){\n          if(data.id !== 2){\n            data.currentPopulation = 0;\n          } else {\n            data.currentPopulation = 100000;\n          }\n        }\n        const planetObj = JSON.stringify({\"planets\" : planetData})\n        const local = localStorage.getItem(\"MOCK_DB\");\n\n        localStorage.setItem(\"planets\", JSON.stringify({\"planets\" : planetData})); \n       \n        console.log(planetData, 'getPlanets')\n      }\n      resetPlanetsCapacities();\n    }\n\n    }, [resetCount])\n\n    console.log(\"rendering...\");\n\n    return (\n        <div>\n           <button onClick={() => navigate(-1)}>Back</button>\n           <button onClick={() => incrementResetCount()}>Reset Planets</button>\n           {loadPlanetsFromEffect()}\n        </div>\n    )\n}\n\nexport default Planets;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}