{"ast":null,"code":"var _jsxFileName = \"/Users/owner/Documents/SPRINGBOARD/Projects/space-travel/src/pages/Planets.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SpaceTravelApi from '../services/SpaceTravelApi';\nimport Planet from '../components/ Planet';\nimport DestinationContext from '../context/DestinationContext';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planets = () => {\n  _s();\n  const navigate = useNavigate();\n  const [planets, setPlanets] = useState('');\n  // const {targetPlanet} = useContext(DestinationContext);\n  // const [, updateState] = React.useState();\n  // const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [resetCount, setResetCount] = useState(0);\n  const [resetPlanetObjs, setResetPlanetObjs] = useState([]);\n\n  // useEffect(() => {\n  //     const loadPlanets = async () => {\n  //         const loadingAPI = await SpaceTravelApi.getPlanets();\n  //         console.log(loadingAPI, 'loadingAPI')\n  //         setPlanets(loadingAPI.data);\n  //     }\n\n  //     loadPlanets(); \n  // }, [])\n\n  // const loadPlanetsFromEffect = () => {\n  //     if(planets !== ''){\n  //         return (\n  //           planets.map((p) => {\n  //             return (\n  //               <Planet \n  //                 id={p.id} \n  //                 key={p.id}\n  //                 pictureUrl={p.pictureUrl} \n  //                 name={p.name} \n  //                 currentPopulation={p.currentPopulation}\n  //               />\n  //             )\n  //           })\n  //         )\n  //       }\n  // }\n\n  // useEffect(() => {\n  //   if(targetPlanet !== null){\n  //     forceUpdate();\n  //   }\n  // }, [forceUpdate, targetPlanet])\n\n  const incrementResetCount = () => {\n    setResetCount(count => count + 1);\n  };\n  useEffect(() => {\n    if (resetCount > 0) {\n      const resetPlanetsCapacities = async () => {\n        const getPlanets = await SpaceTravelApi.getPlanets();\n        const planetData = getPlanets.data;\n        for (let data of planetData) {\n          if (data.id !== 2) {\n            data.currentPopulation = 0;\n          } else {\n            data.currentPopulation = 100000;\n          }\n        }\n        const planetObj = JSON.stringify({\n          \"planets\": planetData\n        });\n        const local = localStorage.getItem(\"MOCK_DB\");\n        localStorage.setItem(\"planets\", JSON.stringify({\n          \"planets\": planetData\n        }));\n        console.log(planetData, 'getPlanets');\n      };\n      resetPlanetsCapacities();\n    }\n  }, [resetCount]);\n  console.log(\"rendering...\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => incrementResetCount(),\n      children: \"Reset Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Planets, \"94T7ADHJfE2mZGbK/wCu3y6cru0=\", false, function () {\n  return [useNavigate];\n});\n_c = Planets;\nexport default Planets;\nvar _c;\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","SpaceTravelApi","Planet","DestinationContext","useContext","jsxDEV","_jsxDEV","Planets","_s","navigate","planets","setPlanets","resetCount","setResetCount","resetPlanetObjs","setResetPlanetObjs","incrementResetCount","count","resetPlanetsCapacities","getPlanets","planetData","data","id","currentPopulation","planetObj","JSON","stringify","local","localStorage","getItem","setItem","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owner/Documents/SPRINGBOARD/Projects/space-travel/src/pages/Planets.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SpaceTravelApi from '../services/SpaceTravelApi';\nimport Planet from '../components/ Planet';\nimport DestinationContext from '../context/DestinationContext';\nimport { useContext } from 'react';\n\nconst Planets = () => {\n    const navigate = useNavigate();\n    const [planets, setPlanets] = useState('');\n    // const {targetPlanet} = useContext(DestinationContext);\n    // const [, updateState] = React.useState();\n    // const forceUpdate = React.useCallback(() => updateState({}), []);\n    const [resetCount, setResetCount] = useState(0);\n    const [resetPlanetObjs, setResetPlanetObjs] = useState([]);\n\n    // useEffect(() => {\n    //     const loadPlanets = async () => {\n    //         const loadingAPI = await SpaceTravelApi.getPlanets();\n    //         console.log(loadingAPI, 'loadingAPI')\n    //         setPlanets(loadingAPI.data);\n    //     }\n\n    //     loadPlanets(); \n    // }, [])\n\n    // const loadPlanetsFromEffect = () => {\n    //     if(planets !== ''){\n    //         return (\n    //           planets.map((p) => {\n    //             return (\n    //               <Planet \n    //                 id={p.id} \n    //                 key={p.id}\n    //                 pictureUrl={p.pictureUrl} \n    //                 name={p.name} \n    //                 currentPopulation={p.currentPopulation}\n    //               />\n    //             )\n    //           })\n    //         )\n    //       }\n    // }\n\n    // useEffect(() => {\n    //   if(targetPlanet !== null){\n    //     forceUpdate();\n    //   }\n    // }, [forceUpdate, targetPlanet])\n\n    const incrementResetCount = () => {\n      setResetCount(count => count + 1);\n    }\n\n    useEffect(() => {\n      if(resetCount > 0){\n      const resetPlanetsCapacities = async () => {\n        const getPlanets = await SpaceTravelApi.getPlanets();\n        const planetData = getPlanets.data;\n        for(let data of planetData){\n          if(data.id !== 2){\n            data.currentPopulation = 0;\n          } else {\n            data.currentPopulation = 100000;\n          }\n        }\n        const planetObj = JSON.stringify({\"planets\" : planetData})\n        const local = localStorage.getItem(\"MOCK_DB\");\n\n        localStorage.setItem(\"planets\", JSON.stringify({\"planets\" : planetData})); \n       \n        console.log(planetData, 'getPlanets')\n      }\n      resetPlanetsCapacities();\n    }\n\n    }, [resetCount])\n\n    console.log(\"rendering...\");\n\n    return (\n        <div>\n           <button onClick={() => navigate(-1)}>Back</button>\n           <button onClick={() => incrementResetCount()}>Reset Planets</button>\n           {/* {loadPlanetsFromEffect()} */}\n        </div>\n    )\n}\n\nexport default Planets;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}